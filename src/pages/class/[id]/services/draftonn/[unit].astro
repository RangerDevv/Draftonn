---
import { Models, Query } from "appwrite";
import Create from "../../../../../components/global/create.svelte";
import Layout from "../../../../../layouts/Layout.astro";
import { appwriteDatabases } from "../../../../../lib/backend";
import { COLLECTION, DB_ID } from "../../../../../lib/ids";

let classID = Astro.params.id as string
let unitID = Astro.params.unit as string

let user = Astro.cookies.get('user').value as string;
let username = Astro.cookies.get('userName').value as string;

let unitName = (await appwriteDatabases.getDocument(DB_ID, COLLECTION.Units, unitID)).Name

var groupBy = function(xs: Array<any>, key: any) {
  return xs.reduce(function(rv, x) {
    (rv[x[key]] = rv[x[key]] || []).push(x);
    return rv;
  }, {});
};


let lessons: Models.Document[][] = await appwriteDatabases.listDocuments(DB_ID, COLLECTION.CCNote, [
    Query.equal("Unit", unitID),
    Query.orderAsc("Name"),
    Query.orderDesc("LastUpdated")
]).then(x => x.documents).then(docs => {
    let newdict = groupBy(docs, "Name")
    let newarr = []
    for(let [key, val] of Object.entries(newdict)) newarr.push(val);
    return newarr as Models.Document[][]
}) //TODO: Group this into a 2D array or dictionary grouped by lesson name, 
//with the groups in the order of the most recent lesson names
---
<Layout title="Unit Page" login={true}>
    <div class="flex flex-col pt-5 min-h-screen w-[100%]">
        <div class="row">
            <div class="col-12">
                <h1 class="text-4xl font-semibold text-center">{unitName}</h1>
                <div class="flex flex-col gap-5 items-center p-12">
                    <Create AuthorName={username} AuthorUid={user} {unitID} client:only />
                    {lessons.map(lesson =>
                        <div class="w-full items-center flex flex-col">
                            <h1>Something</h1>
                            {lesson.map(note => 
                            <div style="cursor: pointer;" class="card w-[26rem] sm:w-7/12 h-24 sm:h-20 bg-slate-400">
                                <div class="text-xl items-center justify-center">
                                    <h1 class="text-xl pt-[5%] sm:pt-5 text-center">{note.Name}</h1>
                                </div>
                            </div>)}
                        </div>
                    )}
                    <!-- 
                    {(Units.length > 0) && <h1 class="text-xl font-semibold">Units</h1>}
                    {(Units.length > 0)
                        && Units.map((unit) => (
                        <div onclick={`window.location = "/class/${classId}/services/draftonn/${unit.$id}"`} style="cursor: pointer;" class="card w-[26rem] sm:w-7/12 h-24 sm:h-20 bg-slate-400">
                            <div class="text-xl items-center justify-center">
                                <h1 class="text-xl pt-[5%] sm:pt-5 text-center">{unit.Name}</h1>
                            </div>
                        </div>
                        ))
                    } -->
                </div>
            </div>
        </div>
    </div>
</Layout>